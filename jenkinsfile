pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '539825459983'
        ECR_REPO_NAME = 'pet-clinic'
        IMAGE_NAME = 'pet-clinic'
        AWS_CREDENTIALS_ID = 'AWS'
    }

    stages {
        stage('Checkout main branch') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/saikoushik16/spring-petclinic.git',
                        credentialsId: 'git'  // <-- replace this
                    ]]
                ])
            }
        }


        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests -Dcheckstyle.skip=true'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${IMAGE_NAME} .'
            }
        }

        stage('Authenticate and Push to AWS ECR') {
            steps {
                script {
                    withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | \
                            docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                        sh "docker tag ${IMAGE_NAME}:latest ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:1.0.0"
                        sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:1.0.0"
                    }
                }
            }
        }
        stage('Authenticate AWS and Deploy to EKS') {
    steps {
        script {
            withCredentials([aws(credentialsId: AWS_CREDENTIALS_ID)]) {
                sh '''
                    # Configure kubeconfig for the EKS cluster
                    aws eks update-kubeconfig --region us-east-1 --name demo-eks

                    # Create or update the ECR docker-registry secret
                    kubectl delete secret ecr-secret --ignore-not-found
                    kubectl create secret docker-registry ecr-secret \
                      --docker-server=539825459983.dkr.ecr.us-east-1.amazonaws.com \
                      --docker-username=AWS \
                      --docker-password="$(aws ecr get-login-password --region us-east-1)" \
                      --docker-email=example@example.com

                    # Apply manifests
                    kubectl apply -f k8s/db.yml
                    kubectl apply -f k8s/petclinic.yml

                    # Show pod status
                    kubectl get pods
                '''
            }
        }
    }
}
    }
}
